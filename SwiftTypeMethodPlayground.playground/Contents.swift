class SomeClass {
    static func someTypeMethod(){
        print("class some type method call")
    }
    //SomeClass中的self直接指向类型本身
    //所以类型方法可以调用该类种的其他类型方法
    static func otherTypeMethod(){
        self.someTypeMethod()//不一定要加self
        print("class other type method call yet")
    }
}
//他能够直接通过Class去调用
SomeClass.someTypeMethod()
SomeClass.otherTypeMethod()

struct RunnerLevelTracker {
    //当前解锁的最高等级训练
    static var highestUnlockedLevel = 1
    static func unlockLevel(unlockLevel:Int){
        if unlockLevel > highestUnlockedLevel {
            highestUnlockedLevel = unlockLevel
        }
    }
    static func levelIsUnlocked (level:Int) -> Bool{
        return level <= highestUnlockedLevel
    }
    var currentLevel = 1
    //实例方法调用类型方法要加类型名称
    mutating func advanceToLevel(level:Int) -> Bool{
        if RunnerLevelTracker.levelIsUnlocked(level){
            currentLevel = level
            return true
        } else {
            return false
        }
    }
}

class Runner {
    var tracker = RunnerLevelTracker()
    let name:String
    init(name:String){
        self.name = name
    }
    func completedLevel(level:Int){
        //完成某个等级的训练后，为跑者解锁下一等级的训练
        RunnerLevelTracker.unlockLevel(level+1)
        //当前的状态设置为下一等级
        tracker.advanceToLevel(level+1)
    }
    func advanceToLevel(level:Int){
        if self.tracker.advanceToLevel(level) {
            print("跑者正在进行（level:\(level)的训练）")
        } else {
            print("(level:\(level)的训练并未解锁，无法开始)")
        }
        
    }
}

var runner = Runner(name: "David")
runner.completedLevel(3)
runner.advanceToLevel(8)//提示无法切换

/**
  *下标脚本
  *就是像Array,Dictionary那样用下标来访问内容
***/


//用于转化鞋垫ADC->力值
class ForceTranslate {
    var forceTranslateArray = [1.48600000000000, 1.49000123124443, 1.49631374261233, 1.50396960876805, 1.51267389013312, 1.52227043399726, 1.53266172774591, 1.54378140127855, 1.55558188532185, 1.56802795579140, 1.58109299711220, 1.59475667649462, 1.60900341489297, 1.62382133773353, 1.63920152966502, 1.65513749010571, 1.67162472604567, 1.68866044143279, 1.70624329623355, 1.72437321685309, 1.74305124513667, 1.76227941684383, 1.78206066297677, 1.80239872907174, 1.82329810878330, 1.84476398896965, 1.86680220412895, 1.88941919851185, 1.91262199459282, 1.93641816685345, 1.96081582003954, 1.98582357121511, 2.01145053506294, 2.03770631198112, 2.06460097860465, 2.09214508044494, 2.12034962639151, 2.14922608486233, 2.17878638142331, 2.20904289772600, 2.24000847163584, 2.27169639844273, 2.30412043306228, 2.33729479314956, 2.37123416305909, 2.40595369859437, 2.44146903249897, 2.47779628064829, 2.51495204890741, 2.55295344062568, 2.59181806474361, 2.63156404449170, 2.67221002666412, 2.71377519145384, 2.75627926283813, 2.79974251950622, 2.84418580632286, 2.88963054632373, 2.93609875324034, 2.98361304455383, 3.03219665507840, 3.08187345107670, 3.13266794491064, 3.18460531023235, 3.23771139772098, 3.29201275137238, 3.34753662534932, 3.40431100140115, 3.46236460686247, 3.52172693324147, 3.58242825540916, 3.64449965140189, 3.70797302284986, 3.77288111604569, 3.83925754366733, 3.90713680717070, 3.97655431986817, 4.04754643070949, 4.12015044878296, 4.19440466855488, 4.27034839586662, 4.34802197470893, 4.42746681479417, 4.50872541994792, 4.59184141734208, 4.67685958759250, 4.76382589574495, 4.85278752317413, 4.94379290042125, 5.03689174099662, 5.13213507617444, 5.22957529080818, 5.32926616019568, 5.43126288802400, 5.53562214542538, 5.64240211117621, 5.75166251307244, 5.86346467051556, 5.97787153834464, 6.09494775195085, 6.21475967371227, 6.33737544078784, 6.46286501431053, 6.59130023002130, 6.72275485038649, 6.85730461824269, 6.99502731201468, 7.13600280255341, 7.28031311164220, 7.42804247222142, 7.57927739038290, 7.73410670918740, 7.89262167435986, 8.05491600191911, 8.22108594780010, 8.39123037952925, 8.56545085001459, 8.74385167351495, 8.92654000385421, 9.11362591494874, 9.30522248371821, 9.50144587545253, 9.70241543170941, 9.90825376081992, 10.1190868310815, 10.3350440667208, 10.5562584467105, 10.7828666065282, 11.0150089429468, 11.2528297219506, 11.4964771898711, 11.7461036878434, 12.0018657696847, 12.2639243233000, 12.5324446957235, 12.8075968219094, 13.0895553573858, 13.3784998148928, 13.6746147051273, 13.9780896817218, 14.2891196905884, 14.6079051237639, 14.9346519778951, 15.2695720175090, 15.6128829432168, 15.9648085650044, 16.3255789807702, 16.6954307602705, 17.0746071346448, 17.4633581916930, 17.8619410770851, 18.2706202016894, 18.6896674552108, 19.1193624263364, 19.5599926295935, 20.0118537391304, 20.4752498296376, 20.9504936246341, 21.4379067523509, 21.9378200094508, 22.4505736328319, 22.9765175797703, 23.5160118166642, 24.0694266166535, 24.6371428663937, 25.2195523822752, 25.8170582363875, 26.4300750925364, 27.0590295526348, 27.7043605137957, 28.3665195364684, 29.0459712239690, 29.7431936137684, 30.4586785809124, 31.1929322539617, 31.9464754438504, 32.7198440860776, 33.5135896966561, 34.3282798422617, 35.1644986250350, 36.0228471825077, 36.9039442031379, 37.8084264579550, 38.7369493488335, 39.6901874739291, 40.6688352108308, 41.6736073179985, 42.7052395550770, 43.7644893226943, 44.8521363223743, 45.9689832372134, 47.1158564339935, 48.2936066874232, 49.5031099272274, 50.7452680088228, 52.0210095083462, 53.3312905428265, 54.6770956163169, 56.0594384928315, 57.4793630969600, 58.9379444430597, 60.4362895939592, 61.9755386501339, 63.5568657703504, 65.1814802248063, 66.8506274818294, 68.5655903292332, 70.3276900314645, 72.1382875237165, 73.9987846442181, 75.9106254059556, 77.8752973091182, 79.8943326956100, 81.9693101470099, 84.1018559274110, 86.2936454726172, 88.5464049272281, 90.8619127311892, 93.2420012574440, 95.6885585023743, 98.2035298307772, 100.788919777182, 103.446793905372, 106.179280728050, 108.988573688623, 111.876933207191, 114.846688792861, 117.900241224586, 121.040064802827, 124.268709674377, 127.588804232796, 131.003057596977, 134.514262170446, 138.125296284102, 141.839126925170, 145.658812555267, 149.587506020551, 153.628457557050, 157.785017894342, 162.060641460909, 166.458889694563, 170.983434461466, 175.638061587426, 180.426674505206, 185.353298021782, 190.422082209581, 195.637306425871, 201.003383464645, 206.524863845454, 212.206440243826, 218.052952068059, 224.069390187340, 230.260901816304, 236.632795561357, 243.190546634219, 249.939802238392]
    subscript(index:Int) -> Double {
        get {
            return forceTranslateArray[index]
        }
        set(newValue) {//默认叫newValue，其实可以省略
            forceTranslateArray[index] = newValue
        }
    }
}

var translater = ForceTranslate()
//用下脚标语法去get
print("ADC:100,force:\(translater[100])")
print("ADC:50,force:\(translater[50])")
print("ADC:80,force:\(translater[80])")
print("ADC:120,force:\(translater[120])")
print("ADC:180,force:\(translater[180])")
//可以改变
translater[180] = 40.563
print("ADC:180,force:\(translater[180])")

struct BinaryTable {
    let base:Int = 1
    subscript(index:Int) -> Int {
        return 1 << (index-1)
    }
}

var binaryTable = BinaryTable()
print(binaryTable[3])//3位二进制为100 8

//二位数组
struct Matrix {
    var rows:Int,colums:Int;
    var grid:[Double];
    init(rows:Int,colums:Int){
        self.rows = rows
        self.colums = colums
        self.grid = Array(count: rows*colums, repeatedValue: 0.0)
    }
    func indexIsValidForRow(row:Int,colum:Int) ->Bool {
        return row > 0 && row < rows && colum < colums && colum > 0
    }
    subscript (row:Int,colum:Int) ->Double{
        get {
            assert(indexIsValidForRow(row, colum: colum))
            return grid[row*colums + colum]
        }
        set {
            assert(indexIsValidForRow(row, colum: colum))
            grid[row*colums + colum] = newValue
        }
    }
}

var matrix = Matrix(rows: 2, colums: 2)
print(matrix.grid)

//let someValue = matrix[2,1]//报错,超出范围，被断言判断为错误

matrix[0,0] = 1.321
matrix[1,1] = 12.3231
print(matrix[1,1])


